# Build stage
FROM rust:latest

# Install build dependencies and cross-compilation tools
RUN dpkg --add-architecture arm64 && \
    apt-get update && \
    apt-get install -y \
    gcc \
    g++ \
    make \
    libssl-dev \
    pkg-config \
    gfortran \
    crossbuild-essential-arm64 \
    libgfortran5 \
    libgfortran-dev \
    libc6-dev:arm64 \
    && rm -rf /var/lib/apt/lists/*

# Install Rust and add ARM64 target
RUN rustup target add aarch64-unknown-linux-gnu

# Set up environment variables
ENV PATH="/usr/local/cargo/bin:${PATH}" \
    OPENBLAS_LIB_DIR=/usr/lib/aarch64-linux-gnu \
    OPENBLAS_INCLUDE_DIR=/usr/include \
    LIBRARY_PATH=/usr/lib/aarch64-linux-gnu \
    RUSTFLAGS="-C target-feature=+crt-static" \
    CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc \
    CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++ \
    AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar \
    CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc

WORKDIR /usr/src/app

# Copy the source code
COPY . .

# Build the project
RUN cargo build --release --bin bootstrap --target aarch64-unknown-linux-gnu

# Runtime stage
FROM public.ecr.aws/lambda/provided:al2
COPY --from=0 /usr/src/app/target/aarch64-unknown-linux-gnu/release/bootstrap /var/runtime/bootstrap

# Set the CMD to your handler
ENTRYPOINT [ "/var/runtime/bootstrap" ]


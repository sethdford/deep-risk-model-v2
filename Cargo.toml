[package]
name = "deep_risk_model"
version = "0.1.0"
edition = "2021"
authors = ["Seth Ford <seth.ford@gmail.com>"]
description = "A deep learning-based risk model for financial markets"
license = "MIT"

[dependencies]
# Core async runtime
tokio = { version = "1.0", features = ["macros", "rt-multi-thread"] }

# HTTP client
reqwest = { version = "0.11", default-features = false, features = ["rustls-tls"] }

# HTTP server and middleware
axum = "0.7.2"
tower-http = { version = "0.5", features = ["cors"] }

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# Logging and error handling
tracing = { version = "0.1", features = ["log"] }
tracing-subscriber = { version = "0.3", default-features = false, features = ["fmt", "json"] }

# Data processing
ndarray = { version = "0.15.6", features = ["serde", "blas"] }
ndarray-rand = "0.14.0"
ndarray-stats = "0.5.1"
rand = "0.8.5"
rand_distr = "0.4.3"
rand_chacha = "0.3"
num-traits = "0.2"

# Linear algebra - choose one of these options:
# Option 1: Pure Rust implementation (no external dependencies)
linfa-linalg = { version = "0.1.0", optional = true }

# Option 2: BLAS-based implementation (requires external libraries)
ndarray-linalg = { version = "0.14.1", optional = true }

# BLAS implementation options
openblas-src = { version = "0.10.8", optional = true, default-features = false, features = ["cblas"] }
netlib-src = { version = "0.8", optional = true, features = ["cblas"] }
intel-mkl-src = { version = "0.5", optional = true }
accelerate-src = { version = "0.3", optional = true }
blas-src = { version = "0.8", optional = true }

# Async traits
async-trait = "0.1"

# Error handling
anyhow = "1.0.75"
thiserror = "1.0"
parking_lot = "0.12"

# Date/time handling
chrono = { version = "0.4", features = ["serde"] }

# AWS Lambda dependencies
lambda_http = { version = "0.8.3" }
lambda_runtime = { version = "0.8.3" }
aws-config = { version = "0.55.3", features = ["rustls"], default-features = false }
aws-sdk-s3 = { version = "0.28.0", features = ["rustls"], default-features = false }
aws-types = "1.0"
tokio-util = { version = "0.7", features = ["codec"] }

# Additional dependencies
rayon = "1.7"

# Memory monitoring
sysinfo = "0.29"

# GPU dependencies will be added in a future update
# These dependencies are commented out because they require the CUDA toolkit to be installed
# Uncomment and update versions as needed when implementing actual GPU support
# cuda-runtime-sys = { version = "0.3.0-alpha.1", optional = true }
# cublas-sys = { version = "0.1.0", optional = true }
# curand-sys = { version = "0.1.0", optional = true }

[features]
# Default features - use OpenBLAS by default
default = ["openblas"]

# Pure Rust implementation (no external dependencies)
pure-rust = ["linfa-linalg"]

# BLAS implementations (require external libraries)
openblas = ["ndarray-linalg", "openblas-src", "blas-src/openblas"]
netlib = ["ndarray-linalg", "netlib-src", "blas-src/netlib"]
intel-mkl = ["ndarray-linalg", "intel-mkl-src", "blas-src/intel-mkl"]
accelerate = ["ndarray-linalg", "accelerate-src", "blas-src/accelerate"]

# System-specific features
system = ["openblas-src/system"]
static = ["openblas-src/static"]

# Features for conditional compilation
blas-enabled = []
gpu = []
no-blas = ["pure-rust"]

# macOS-specific default features
[target.'cfg(target_os = "macos")'.dependencies]
accelerate-src = { version = "0.3", optional = true }

# Linux-specific dependencies
[target.'cfg(target_os = "linux")'.dependencies]
openblas-src = { version = "0.10.8", features = ["cblas", "system"], optional = true }

# Windows-specific dependencies
[target.'cfg(target_os = "windows")'.dependencies]
openblas-src = { version = "0.10.8", features = ["cblas", "static"], optional = true }

# Dev dependencies for testing
[dev-dependencies]
# Async testing
tokio-test = "0.4"

# Logging for tests
test-log = "0.2"

# Benchmarking
criterion = { version = "0.5", features = ["html_reports"] }
approx = "0.5"

# Property-based testing
proptest = "1.3"

# HTTP mocking
mockito = "1.2"

# Mocking
mockall = "0.11"

[[bin]]
name = "bootstrap"
path = "src/bin/bootstrap.rs"

[[bin]]
name = "basic_demo"
path = "examples/basic_demo.rs"

[[bin]]
name = "risk_model_demo"
path = "examples/risk_model_demo.rs"

[[bin]]
name = "api_server"
path = "src/bin/api_server.rs"

[[bin]]
name = "regime_example"
path = "examples/regime_example.rs"

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
panic = "abort"
strip = true

[profile.dev]
opt-level = 0
debug = 2

[lib]
name = "deep_risk_model"
path = "src/lib.rs"

[[bench]]
name = "transformer_benchmarks"
harness = false

[[bench]]
name = "model_benchmarks"
harness = false

[[example]]
name = "quantization_example"
path = "examples/quantization_example.rs"

[[example]]
name = "memory_optimization_example"
path = "examples/memory_optimization_example.rs"

[[example]]
name = "linalg_example"
path = "examples/linalg_example.rs"

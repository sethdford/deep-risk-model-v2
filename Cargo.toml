[package]
name = "deep_risk_model"
version = "0.1.0"
edition = "2021"
authors = ["Seth Ford <seth.ford@gmail.com>"]
description = "A deep learning-based risk model for financial markets"
license = "MIT"

[dependencies]
# Core async runtime
tokio = { version = "1.0", features = ["full", "macros", "rt-multi-thread"] }

# HTTP client
reqwest = "0.11"

# HTTP server and middleware
axum = { version = "0.7", features = ["macros"] }
tower-http = { version = "0.5", features = ["cors"] }

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# Logging and error handling
tracing = "0.1"
tracing-subscriber = "0.3"

# Data processing
ndarray = { version = "0.15", features = ["serde"] }
ndarray-rand = "0.14"
ndarray-stats = "0.5"
rand = "0.8"
rand_distr = "0.4"
rand_chacha = "0.3"
num-traits = "0.2"

# Linear algebra - simplified approach
ndarray-linalg = { version = "0.16", optional = true }

# BLAS implementation options - only one will be used based on features
openblas-src = { version = "0.10", optional = true, features = ["cblas"] }
netlib-src = { version = "0.8", optional = true, features = ["cblas"] }
intel-mkl-src = { version = "0.8", optional = true }
accelerate-src = { version = "0.3", optional = true }

# Async traits
async-trait = "0.1"

# Error handling
anyhow = "1.0"
thiserror = "1.0"
parking_lot = "0.12"

# Date/time handling
chrono = { version = "0.4", features = ["serde"] }

# AWS Lambda dependencies
lambda_http = "0.8"
lambda_runtime = "0.8"
aws-config = "0.55"
aws-sdk-s3 = "0.28"
aws-types = "1.0"
tokio-util = { version = "0.7", features = ["codec"] }

# Additional dependencies
rayon = "1.7"

# Python bindings
pyo3 = { version = "0.20", features = ["extension-module"] }

# Memory monitoring
sysinfo = "0.29"

# GPU dependencies will be added in a future update
# These dependencies are commented out because they require the CUDA toolkit to be installed
# Uncomment and update versions as needed when implementing actual GPU support
# cuda-runtime-sys = { version = "0.3.0-alpha.1", optional = true }
# cublas-sys = { version = "0.1.0", optional = true }
# curand-sys = { version = "0.1.0", optional = true }

[features]
default = ["openblas"]

# Main feature flags - choose one BLAS implementation
openblas = ["ndarray/blas", "ndarray-linalg", "dep:openblas-src", "blas-enabled"]
netlib = ["ndarray/blas", "ndarray-linalg", "dep:netlib-src", "blas-enabled"]
intel-mkl = ["ndarray/blas", "ndarray-linalg", "dep:intel-mkl-src", "blas-enabled"]
accelerate = ["ndarray/blas", "ndarray-linalg", "dep:accelerate-src", "blas-enabled"]

# System BLAS - use pre-installed BLAS libraries (required for Windows)
system = ["ndarray/blas", "ndarray-linalg", "openblas-src/system", "blas-enabled"]

# Internal feature to track if any BLAS implementation is enabled
blas-enabled = []

# No BLAS support - pure Rust implementation
# IMPORTANT: When using this feature, you MUST also disable default features:
# cargo build --no-default-features --features no-blas
no-blas = []

# GPU feature - placeholder for future GPU support
gpu = []  # Will include CUDA dependencies when they are properly implemented

# Ensure tests always use BLAS
[dev-dependencies.deep_risk_model]
path = "."
features = ["openblas"]

[dev-dependencies]
# Async testing
tokio-test = "0.4"

# Logging for tests
test-log = "0.2"

# Benchmarking
criterion = { version = "0.5", features = ["html_reports"] }
approx = "0.5"

# Property-based testing
proptest = "1.3"

# HTTP mocking
mockito = "1.2"

# Mocking
mockall = "0.11"

# BLAS dependencies for tests
openblas-src = { version = "0.10", features = ["cblas"] }

[[bin]]
name = "bootstrap"
path = "src/lambda.rs"

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
panic = "abort"
strip = true

[profile.dev]
opt-level = 0
debug = 2

[lib]
name = "deep_risk_model"
path = "src/lib.rs"

[[bin]]
name = "server"
path = "src/bin/server.rs"

[[bench]]
name = "transformer_benchmarks"
harness = false

[[bench]]
name = "model_benchmarks"
harness = false

[[example]]
name = "quantization_example"
path = "examples/quantization_example.rs"

[[example]]
name = "memory_optimization_example"
path = "examples/memory_optimization_example.rs"
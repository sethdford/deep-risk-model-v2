name: Deploy GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          working-directory: docs
      
      - name: Install Bundler 2.x
        run: |
          cd docs
          gem install bundler -v 2.4.22
      
      - name: Bundle Install
        run: |
          cd docs
          bundle install
      
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
      
      - name: Create necessary directories
        run: |
          mkdir -p docs/docs
          mkdir -p docs/api-reference
          mkdir -p docs/examples
      
      - name: Convert markdown files
        run: |
          cd docs
          ruby convert_markdown.rb
      
      - name: Generate search data
        run: |
          cd docs
          ruby generate_search_data.rb
      
      - name: Debug Jekyll environment
        run: |
          cd docs
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          echo "Jekyll version:"
          bundle exec jekyll --version
          echo "Base path: ${{ steps.pages.outputs.base_path }}"
      
      - name: Build with Jekyll
        run: |
          cd docs
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      
      - name: Debug _site directory
        run: |
          echo "Checking if _site directory exists:"
          ls -la docs
          echo "Contents of _site directory (if it exists):"
          if [ -d "docs/_site" ]; then
            ls -la docs/_site
          else
            echo "_site directory not found!"
          fi
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/_site
          retention-days: 1

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3 
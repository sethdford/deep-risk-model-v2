name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  PYO3_USE_ABI3_FORWARD_COMPATIBILITY: 1

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        blas: [with-blas, without-blas]
        include:
          - blas: with-blas
            features: "openblas"
          - blas: without-blas
            features: "no-blas"
        exclude:
          # Exclude Windows with OpenBLAS for now as it can be problematic
          - os: windows-latest
            blas: with-blas

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Set up Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.blas }}
    
    # Install system dependencies for OpenBLAS on Ubuntu
    - name: Install OpenBLAS dependencies (Ubuntu)
      if: matrix.blas == 'with-blas' && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gfortran
    
    # Install OpenBLAS on macOS
    - name: Install OpenBLAS (macOS)
      if: matrix.blas == 'with-blas' && matrix.os == 'macos-latest'
      run: |
        brew install openblas gfortran
        echo "LIBRARY_PATH=$LIBRARY_PATH:/opt/homebrew/opt/openblas/lib:/opt/homebrew/lib" >> $GITHUB_ENV
        echo "CPATH=$CPATH:/opt/homebrew/opt/openblas/include" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/opt/homebrew/opt/openblas/lib/pkgconfig" >> $GITHUB_ENV
        echo "OPENBLAS_HOME=/opt/homebrew/opt/openblas" >> $GITHUB_ENV
        echo "LDFLAGS=-L/opt/homebrew/opt/openblas/lib -L/opt/homebrew/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/opt/homebrew/opt/openblas/include" >> $GITHUB_ENV
        # List OpenBLAS libraries for debugging
        ls -la /opt/homebrew/opt/openblas/lib || true
        # Check if gfortran is installed and available
        which gfortran || echo "gfortran not found"
        # Try to find libgfortran
        find /opt/homebrew -name "libgfortran*" || echo "libgfortran not found in /opt/homebrew"
        find /usr/local -name "libgfortran*" || echo "libgfortran not found in /usr/local"
    
    # Build with the specified features
    - name: Build
      id: build
      continue-on-error: true
      run: cargo build --verbose --no-default-features --features ${{ matrix.features }}
    
    # Fallback to Accelerate on macOS if OpenBLAS build fails
    - name: Fallback to Accelerate (macOS)
      if: steps.build.outcome == 'failure' && matrix.blas == 'with-blas' && matrix.os == 'macos-latest'
      run: |
        echo "Falling back to Apple's Accelerate framework"
        cargo build --verbose --no-default-features --features accelerate
    
    # Build examples with the specified features - macOS with Accelerate fallback
    - name: Build examples with Accelerate (macOS fallback)
      if: matrix.os == 'macos-latest' && matrix.blas == 'with-blas' && steps.build.outcome == 'failure'
      run: cargo build --verbose --no-default-features --features accelerate --examples
    
    # Build examples with the specified features - standard path
    - name: Build examples
      if: ${{ !(matrix.os == 'macos-latest' && matrix.blas == 'with-blas' && steps.build.outcome == 'failure') }}
      run: cargo build --verbose --no-default-features --features ${{ matrix.features }} --examples
    
    # Run tests with the specified features - macOS with Accelerate fallback
    - name: Run tests with Accelerate (macOS fallback)
      if: matrix.os == 'macos-latest' && matrix.blas == 'with-blas' && steps.build.outcome == 'failure'
      run: cargo test --verbose --no-default-features --features accelerate
    
    # Run tests with the specified features - standard path
    - name: Run tests
      if: ${{ !(matrix.os == 'macos-latest' && matrix.blas == 'with-blas' && steps.build.outcome == 'failure') }}
      run: cargo test --verbose --no-default-features --features ${{ matrix.features }}
    
    # Cross-feature test with Accelerate (macOS fallback)
    - name: Cross-feature test with Accelerate (macOS fallback)
      if: matrix.blas == 'with-blas' && matrix.os == 'macos-latest' && steps.build.outcome == 'failure'
      run: cargo test --verbose --no-default-features --features accelerate -- --test-threads=1 fallback
    
    # Cross-feature test - standard path
    - name: Cross-feature test (with BLAS)
      if: ${{ matrix.blas == 'with-blas' && !(matrix.os == 'macos-latest' && steps.build.outcome == 'failure') }}
      run: cargo test --verbose --no-default-features --features ${{ matrix.features }} -- --test-threads=1 fallback

name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        blas: [with-openblas, without-blas]
        include:
          - blas: with-openblas
            features: "openblas-system"
            install_deps: true
          - blas: without-blas
            features: "no-blas"
            install_deps: false

    steps:
    - uses: actions/checkout@v4
    
    - name: Install OpenBLAS dependencies
      if: matrix.install_deps
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenblas-dev liblapack-dev gfortran
        echo "OPENBLAS_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        # List available libraries for debugging
        echo "Available libraries in /usr/lib/x86_64-linux-gnu:"
        ls -la /usr/lib/x86_64-linux-gnu/lib*blas* || true
        ls -la /usr/lib/x86_64-linux-gnu/libopenblas* || true
        ls -la /usr/lib/x86_64-linux-gnu/liblapack* || true
    
    - name: Set up Rust cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.blas }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.blas }}-
    
    - name: Build with OpenBLAS
      if: matrix.blas == 'with-openblas'
      run: |
        export RUSTFLAGS="-C link-args=-L/usr/lib/x86_64-linux-gnu -C link-args=-L/usr/lib"
        cargo build --verbose --features ${{ matrix.features }}
        # Build examples with the same features
        cargo build --verbose --features ${{ matrix.features }} --examples
      env:
        OPENBLAS_SYSTEM: 1
    
    - name: Clean before building without BLAS
      if: matrix.blas == 'without-blas'
      run: |
        cargo clean
        rm -f Cargo.lock
    
    - name: Build without BLAS
      if: matrix.blas == 'without-blas'
      run: |
        cargo build --verbose --no-default-features --features ${{ matrix.features }}
        # Build examples with the same features
        cargo build --verbose --no-default-features --features ${{ matrix.features }} --examples
    
    - name: Run tests with OpenBLAS
      if: matrix.blas == 'with-openblas'
      run: |
        export RUSTFLAGS="-C link-args=-L/usr/lib/x86_64-linux-gnu -C link-args=-L/usr/lib"
        cargo test --verbose --features ${{ matrix.features }}
      env:
        OPENBLAS_SYSTEM: 1
    
    - name: Run tests without BLAS
      if: matrix.blas == 'without-blas'
      run: cargo test --verbose --no-default-features --features ${{ matrix.features }}
